var documenterSearchIndex = {"docs":
[{"location":"DataServer/#DataServer.jl-API","page":"DataServer","title":"DataServer.jl API","text":"","category":"section"},{"location":"DataServer/#EngineeringDataManager.DataServer","page":"DataServer","title":"EngineeringDataManager.DataServer","text":"Module which runs a simple tcp/ip server to elaborate requests from external clients\n\nRequests are configured in [COMMANDS_LIST] dictionary. First, client should send a string of request (key of the COMMANDS_LIST), further is should conretize the request according to the request callback specification.\n\n\n\n\n\n","category":"module"},{"location":"DataServer/#EngineeringDataManager.DataServer.request_port_names-Tuple{EngineeringDataManager.DataServer.TCPcommunication.TCP_Server, Sockets.TCPSocket}","page":"DataServer","title":"EngineeringDataManager.DataServer.request_port_names","text":"request_port_names(serv::TCP_Server,sock::TCPSocket)\n\nReturns all clients ports names\n\n\n\n\n\n","category":"method"},{"location":"DataServer/#EngineeringDataManager.DataServer.request_property_data-Tuple{EngineeringDataManager.DataServer.TCPcommunication.TCP_Server, Sockets.TCPSocket}","page":"DataServer","title":"EngineeringDataManager.DataServer.request_property_data","text":"request_property_data(::TCP_Server,socket::TCPSocket)\n\nClient property request callback\n\n\n\n\n\n","category":"method"},{"location":"DataServer/#EngineeringDataManager.DataServer.start_server-Tuple{Any}","page":"DataServer","title":"EngineeringDataManager.DataServer.start_server","text":"start_server(port)\n\nStarts localhost server on specified port  \n\n\n\n\n\n","category":"method"},{"location":"DataServer/#EngineeringDataManager.DataServer.start_server-Tuple{}","page":"DataServer","title":"EngineeringDataManager.DataServer.start_server","text":"start_server(;port = DEFAULT_PORT)\n\nStarts localhost server on specified port  \n\n\n\n\n\n","category":"method"},{"location":"DataServer/#EngineeringDataManager.DataServer.stop_server-Tuple{EngineeringDataManager.DataServer.TCPcommunication.TCP_Server, Sockets.TCPSocket}","page":"DataServer","title":"EngineeringDataManager.DataServer.stop_server","text":"stop_server(serv::TCP_Server,::TCPSocket)\n\nServer shutting down \n\n\n\n\n\n","category":"method"},{"location":"DataManager/#DataManager.jl-API","page":"DataManager","title":"DataManager.jl API","text":"","category":"section"},{"location":"DataManager/#EngineeringDataManager.DataManager.fill_ids-Tuple{}","page":"DataManager","title":"EngineeringDataManager.DataManager.fill_ids","text":"fill_ids()\n\nFills ID => name dictionary IDS[] and NAMES[] dictionary for name => ID Name can contain several ids thus NAMES[] dictionary elements are the vectors of strings\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.fill_materials_nodes-Tuple{}","page":"DataManager","title":"EngineeringDataManager.DataManager.fill_materials_nodes","text":"fill_materials_nodes()\n\nFills materials nodes dictionary\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.get_all_qualifiers-Tuple{Union{EngineeringDataManager.DataManager.ParameterValueNode, EngineeringDataManager.DataManager.PropertyDataNode}}","page":"DataManager","title":"EngineeringDataManager.DataManager.get_all_qualifiers","text":"get_all_qualifiers(w_node::Union{ParameterValueNode,PropertyDataNode})\n\nGets all qualifiers from the node and puts them to the OrderedDict with qualifier name as a  key and qualifier string as a value.\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.get_material_node-Tuple{Any}","page":"DataManager","title":"EngineeringDataManager.DataManager.get_material_node","text":"get_material_node(material_name)\n\nMaterial node by name, returns Tuple (materialname,materialnode)\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.get_node_data-Tuple{EngineeringDataManager.DataManager.ParameterValueNode}","page":"DataManager","title":"EngineeringDataManager.DataManager.get_node_data","text":"get_node_data(w_node::ParameterValueNode)\n\nReturns nodes data field content for a single node of ParameterValueNode type\n\nReturns named tuple:     (name = param_name,  - the name of the parameter      id = id,  - paramater/property id     data = data, - data (parsed to vector)     qualifier = qual - qualifier      )\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.get_prop_id_by_prop_name-Tuple{Any}","page":"DataManager","title":"EngineeringDataManager.DataManager.get_prop_id_by_prop_name","text":"get_prop_id_by_prop_name(property_name)\n\nAs far as NAMES dictionary stores both properties and parameters associated to the property name, this function is used to get property id pr* from the property name (otherwise it returns error)\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.get_property_node-Tuple{String, String}","page":"DataManager","title":"EngineeringDataManager.DataManager.get_property_node","text":"get_property_node(property_id_or_name,material_name::Union{String,Nothing}=nothing)\n\nReturns node of property by ID or by its name, for material material_name or for all materials if nothing\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.is_property_data_node-Tuple{Any}","page":"DataManager","title":"EngineeringDataManager.DataManager.is_property_data_node","text":"is_property_data(node)\n\nChecks if the node can be wrapped to PropertyData data type\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.material_nodes-Tuple{}","page":"DataManager","title":"EngineeringDataManager.DataManager.material_nodes","text":"material_nodes(;material_name::String = \"\")\n\nReturns a tuple of two vectors, first - materials names, second one - nodes for material material_name, if material_name = \"\" returns  nodes for all materials\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.search_by_id-Tuple{Any, AbstractVector}","page":"DataManager","title":"EngineeringDataManager.DataManager.search_by_id","text":"search_by_id(starting_node,id::AbstractVector)\n\nReturns property nodes vector by IDs of parameters\n\n\n\n\n\n","category":"method"},{"location":"DataManager/#EngineeringDataManager.DataManager.search_by_id-Tuple{Any, String}","page":"DataManager","title":"EngineeringDataManager.DataManager.search_by_id","text":"search_by_id(starting_node,id::String)\n\nReturns nodes vector by parameter ID\n\n\n\n\n\n","category":"method"},{"location":"#EngineeringDataManager.jl","page":"Home","title":"EngineeringDataManager.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is designed to work with XML files in MatML_doc format (for example,  ANSYS Mechanical exports material properties (EngineeringData)  in this format). Currently the package allows one to read property data as a table or property polynomial approximation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Add package to the working environment ","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/Manarom/EngineeringDataManager.jl.git\")","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick start","text":"","category":"section"},{"location":"#From-julia","page":"Home","title":"From julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    using EngineeringDataManager # before `using`, the package must be added to the working environment \n    EngineeringDataManager.read_engineering_data(xml_file_name) # Loads all content of `xml_file_name` in memory\n    # without input argument reads `EngineeringData.xml` in src folder\n    data = EngineeringDataManager.get_data(property_name = \"Thermal Conductivity\",\n                            material_name = \"Structural Steel\",\n                            format = \"Tabular\") # will return the content of data for \"Thermal Conductivity\"\n                            # for \"Structural Steel\" in tabular format (Polynomial is also possible)\n    data.x # independent variable (e.g. temperature)\n    data.y # dependent varible (property iself)\n    data.xname # \n    data.yname # names\n    data.type # data type","category":"page"},{"location":"#As-a-server-for-external-communication","page":"Home","title":"As a server for external communication","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EngineeringDataManager.jl also works as a server which can return properties to TCP/IP clients.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To start server on port 2000 from console.","category":"page"},{"location":"","page":"Home","title":"Home","text":"    $ julia start_server_script.jl 2000 ","category":"page"},{"location":"","page":"Home","title":"Home","text":"When calling from console the package loads the default xml-file which is located in the source folder, thus this file should be replaced before starting the server. Or the the server from julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    using EngineeringDataManager # before `using`, the package must be added to the working environment \n    EngineeringDataManager.start_server(port = 2000) # starts server on local host","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this case EngineeringDataManager.read_engineering_data(xml_file_name)  can be utilized to load another file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After starting the server, data on material properties can be obtained by client through tcp/ip connection.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Examples of function for reading data are with matlab (..//src//matlabinterface//) and python ( ..//src//pythoninterface//)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For instance, to read property data for the density of Structural Steel in a tabular form, in MATLAB command line:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    addpath('.//src//matlab_interface') % adds the  location of get_property_from_server function to the MATLAB path  \n    data = get_property_from_server(\"Density\",\"Structural Steel\",\"Tabular\") % returns struct with properties","category":"page"}]
}
